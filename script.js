
document.addEventListener('DOMContentLoaded', () => {
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('main');
    const servicesGrid = document.querySelector('.services-grid');

    function setActiveSection(targetSectionId) {
        navLinks.forEach(navLink => navLink.classList.remove('active'));
        const activeLink = document.querySelector(`.nav-link[data-section="${targetSectionId}"]`);
        if (activeLink) {
            activeLink.classList.add('active');
        }

        sections.forEach(section => {
            if (section.id === targetSectionId) {
                section.classList.add('active');
            } else {
                section.classList.remove('active');
            }
        });
    }

    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            if (e.target.dataset.section) {
                e.preventDefault();
                const targetSection = e.target.dataset.section;
                setActiveSection(targetSection);
                if (targetSection === 'services') {
                    fetchServices();
                }
            }
        });
    });

    // ---- API –≠–ù–î–ü–û–ò–ù–¢–´ ----
    const API_URL = 'https://b2dc1005b2cbd4cb2a5defb7547b4b9b.serveo.net/api';
    const ENDPOINTS = {
        services: `${API_URL}/services`,
        login: `${API_URL}/login`,
        adminLogin: `${API_URL}/admin/login`,
        userOrders: `${API_URL}/user/orders`,
        adminStats: `${API_URL}/admin/stats`,
    };

    let currentUser = null;
    let isAdmin = false;

    // ---- –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –£–°–õ–£–ì ----
    async function fetchServices() {
        if (!servicesGrid) return;
        servicesGrid.innerHTML = '<p class="loading-message">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...</p>';
        try {
            const response = await fetch(ENDPOINTS.services);
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥');
            }
            const services = await response.json();
            renderServices(services);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            servicesGrid.innerHTML = '<p class="error-message">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥.</p>';
        }
    }

    function renderServices(services) {
        if (services.length === 0) {
            servicesGrid.innerHTML = '<p class="empty-list-message">–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.</p>';
            return;
        }
        servicesGrid.innerHTML = '';
        services.forEach(service => {
            const serviceItem = document.createElement('div');
            serviceItem.classList.add('service-item');
            serviceItem.innerHTML = `
                <h3>${service.name}</h3>
                <p>${service.description}</p>
                <div class="prices">
                    <span>üí≤ ${service.price_usd} USD</span>
                    <span>‚Çø ${service.price_btc} BTC</span>
                    <span>‚≠êÔ∏è ${service.price_stars} STARS</span>
                </div>
            `;
            servicesGrid.appendChild(serviceItem);
        });
    }

    // ---- –õ–û–ì–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ----

    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const tgId = document.getElementById('tg-id').value;

            try {
                const response = await fetch(ENDPOINTS.login, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ tgId })
                });

                if (!response.ok) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID');
                }

                const userData = await response.json();
                currentUser = userData;
                isAdmin = false;
                updateUIForUser();
                fetchUserOrders(tgId);
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
            }
        });
    }
    
    // ---- –õ–û–ì–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ê–î–ú–ò–ù–ê ----

    const adminLoginForm = document.getElementById('admin-login-form');
    if (adminLoginForm) {
        adminLoginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const adminId = document.getElementById('admin-id').value;

            try {
                const response = await fetch(ENDPOINTS.adminLogin, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ adminId })
                });

                if (!response.ok) {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
                }
                
                currentUser = { id: adminId, name: 'Admin' };
                isAdmin = true;
                updateUIForAdmin();
                fetchAdminStats();
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
            }
        });
    }

    // ---- –õ–û–ì–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê –ü–û–°–õ–ï –í–•–û–î–ê ----

    function updateUIForUser() {
        document.getElementById('login-form-container').style.display = 'none';
        document.getElementById('user-dashboard').style.display = 'block';
        document.getElementById('user-name').textContent = currentUser.name || currentUser.id;
    }

    function updateUIForAdmin() {
        document.getElementById('admin-login-container').style.display = 'none';
        document.getElementById('admin-dashboard').style.display = 'block';
    }

    async function fetchUserOrders(userId) {
        const ordersContainer = document.getElementById('user-orders-container');
        if (!ordersContainer) return;
        ordersContainer.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>';
        try {
            const response = await fetch(`${ENDPOINTS.userOrders}?userId=${userId}`);
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã');
            }
            const orders = await response.json();
            renderUserOrders(orders);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            ordersContainer.innerHTML = '<p class="error">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.</p>';
        }
    }

    function renderUserOrders(orders) {
        const ordersContainer = document.getElementById('user-orders-container');
        if (!ordersContainer) return;
        if (orders.length === 0) {
            ordersContainer.innerHTML = '<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>';
            return;
        }
        ordersContainer.innerHTML = '';
        orders.forEach(order => {
            const orderItem = document.createElement('div');
            orderItem.classList.add('order-item');
            orderItem.innerHTML = `
                <p><strong>–ó–∞–∫–∞–∑ #${order.order_id}</strong></p>
                <p>–£—Å–ª—É–≥–∞: ${order.service_name}</p>
                <p>–°—Ç–∞—Ç—É—Å: <span>${order.status}</span></p>
            `;
            ordersContainer.appendChild(orderItem);
        });
    }

    async function fetchAdminStats() {
        const statsUsers = document.getElementById('stats-users');
        const statsOrders = document.getElementById('stats-orders');
        if (!statsUsers || !statsOrders) return;
        statsUsers.textContent = '...';
        statsOrders.textContent = '...';
        try {
            const response = await fetch(ENDPOINTS.adminStats);
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
            }
            const stats = await response.json();
            statsUsers.textContent = stats.user_count;
            statsOrders.textContent = stats.order_count;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            statsUsers.textContent = '–û—à–∏–±–∫–∞';
            statsOrders.textContent = '–û—à–∏–±–∫–∞';
        }
    }

    // ---- –õ–û–ì–ò–ö–ê –í–´–•–û–î–ê ----

    const logoutButton = document.getElementById('logout-button');
    if (logoutButton) {
        logoutButton.addEventListener('click', () => {
            currentUser = null;
            isAdmin = false;
            document.getElementById('login-form-container').style.display = 'block';
            document.getElementById('user-dashboard').style.display = 'none';
            alert('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.');
        });
    }

    const adminLogoutButton = document.getElementById('admin-logout-button');
    if (adminLogoutButton) {
        adminLogoutButton.addEventListener('click', () => {
            currentUser = null;
            isAdmin = false;
            document.getElementById('admin-login-container').style.display = 'block';
            document.getElementById('admin-dashboard').style.display = 'none';
            alert('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
    const activeSection = document.querySelector('main.active');
    if (activeSection && activeSection.id === 'services') {
        fetchServices();
    }
});
